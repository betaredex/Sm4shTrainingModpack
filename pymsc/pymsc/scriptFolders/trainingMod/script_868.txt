        begin 0x0, 0x2
        pushInt. 0x10
        pushInt. 0x2100000e
        sys. 0x2, 0x16
        not.
        if loc_3D
        pushInt. 0x6
        pushInt. 0x1000003e
        sys. 0x2, 0x16
        pushInt. 0x0
        lessOrEqual.
        if loc_3D
        pushInt. 0x2710
        pushInt. 0x2100000e
        sys 0x2, 0x16

        pushInt. 0x6
        pushInt. 0x11000010
        sys. 0x2, 0x16
        pushInt. 0x0
        equals.
        if setRandom
          pushInt. 0x7
          pushInt. 0x1
          pushInt. 0x3
          sys. 0x2, 0x9
          pushInt. 0x11000010
          sys 0x3, 0x16 # set random
        setRandom:

        pushInt. 0x6
        pushInt. 0x1200004A # showFullModVar
        sys. 0x2, 0x16
        pushInt. 0x1
        equals.
        pushInt. 0x6
        pushInt. 0x1200004A # showFullModVar
        sys. 0x2, 0x16
        pushInt. 0x2
        equals.
        bitOr.
        pushInt. 0x6
        pushInt. 0x2000218
        sys. 0x2, 0x16
        pushInt. 10.0f
        floatLess.
        bitAnd. # noBufferVar < 10.0 (should be 0.8)

        pushInt. 0x6
        pushInt. 0x1200006e
        sys. 0x2, 0x16
        pushInt. 0x1 # if shouldMashJump
        equals.

        bitAnd. # if (showFullModVar == 1 or showFullModVar == 2) and not noBufferVar and (shouldMashJump or shouldRandomMashJumpAD)
        if mashJump
          pushInt. 0x6
          pushInt. 0x10000001
          sys. 0x2, 0x16
          pushInt. 0x6
          pushInt. 0x10000002
          sys. 0x2, 0x16
          lessThan.
          if tryJump
            pushInt. 0x7
            pushInt. 0x6
            pushInt. 0x10000001
            sys. 0x2, 0x16 # get numJumpsUsed
            pushInt. 0x1
            addi.
            pushInt. 0x10000001
            sys 0x3, 0x16 # set numJumpsUsed = numJumpsUsed + 1
            try done
            pushInt. 0x6
            pushInt. 0x1300010c
            sys. 0x2, 0x16
            pushInt. 0x1
            equals.
            if normalJumpType
             pushInt. 0xc
             else callJumpAction
            normalJumpType:
              pushInt. 0xd
            callJumpAction:
            pushInt. 0x1
            pushInt. script_16
            callFunc 0x2
          else done
          tryJump:
        else done
        mashJump:
        done:
        pushInt. 0x6
        pushInt. 0x1200004A # showFullModVar
        sys. 0x2, 0x16
        pushInt. 0x1
        equals.
        pushInt. 0x6
        pushInt. 0x1200004A # showFullModVar
        sys. 0x2, 0x16
        pushInt. 0x2
        equals.
        bitOr.
        pushInt. 0x6
        pushInt. 0x2000218
        sys. 0x2, 0x16
        pushInt. 10.0f
        floatLess.
        bitAnd. # noBufferVar < 10 (should be 0.8)

        pushInt. 0x6
        pushInt. 0x1200006e
        sys. 0x2, 0x16
        pushInt. 0x0 # if shouldMashAirdodge
        equals.

        bitAnd. # if (showFullModVar == 1 or showFullModVar == 2) and shouldMashAirdodge
        if mashAirdodge
          pushVar. 0x1, 0x12
          pushInt. 0x2
          equals.
          if tryAirdodge
            try done2
            pushInt. 0x22
            pushInt. 0x0
            pushInt. script_16 #airdodge
            callFunc 0x2
          else done2
          tryAirdodge:
            try done2
            pushInt. 0x1b
            pushInt. 0x0
            pushInt. script_16 # shield on
            callFunc 0x2
            try done2
            pushInt. 0x1c
            pushInt. 0x0
            pushInt. script_16 # hold shield
            callFunc 0x2
        else done2
        mashAirdodge:
        done2:


loc_3D:
        pushInt. 0x10
        pushInt. 0x20000076
        sys. 0x2, 0x16
        if loc_6C
        pushInt. 0x2
        pushInt. 0x7
        sys. 0x2, 0x2a
        not.
        if loc_6C
        pushInt. 0x1
        else loc_71

loc_6C:
        pushInt. 0x0

loc_71:
        if loc_8F
        pushVar. 0x1, 0x9
        pushInt. 0x3f800000
        floatEqual.
        if loc_8F
        pushInt. 0x1
        else loc_94

loc_8F:
        pushInt. 0x0

loc_94:
        if loc_117
        pushInt. 0x2711
        pushInt. 0x20000076
        sys 0x2, 0x16
        pushInt. 0x0
        pushInt. 0x100000d
        sys. 0x2, 0x17
        floatVarSet 0x0, 0x0
        pushInt. 0x6
        pushInt. 0x1100000f
        sys. 0x2, 0x16
        setVar 0x0, 0x1
        pushVar. 0x0, 0x1
        pushInt. 0xffffffff
        notEqual.
        if loc_102
        try loc_F0
        pushVar. 0x0, 0x1
        pushInt. 0x0
        pushVar. 0x0, 0x0
        pushInt. script_22
        callFunc 0x3

loc_F0:
        pushShort. 0x1b
        pushVar. 0x0, 0x1
        pushVar. 0x0, 0x0
        printf 0x3 #"sub_ftStatusUniqProcessDamage_execNormalDamageCommon motion kind: %d rate: %f"
        else loc_117

loc_102:
        pushInt. 0x4
        pushVar. 0x0, 0x0
        sys 0x2, 0x12
        pushShort. 0x1c
        pushVar. 0x0, 0x0
        printf 0x2 #"sub_ftStatusUniqProcessDamage_execNormalDamageCommon motion rate: %f"

loc_117:
        pushInt. 0x9
        pushInt. 0x11000004
        sys 0x2, 0x16
        pushInt. 0xf
        pushInt. 0x11000006
        sys 0x2, 0x16
        pushInt. 0xf
        pushInt. 0x11000007
        sys 0x2, 0x16
        pushInt. 0x10
        pushInt. 0x2000005a
        sys. 0x2, 0x16
        if loc_181
        pushInt. 0x2
        pushInt. 0xffffffff
        sys. 0x2, 0x11
        pushInt. 0x0
        pushInt. 0x1f
        sys. 0x2, 0x17
        floatNotEqual.
        if loc_181
        try loc_181
        pushInt. 0x1
        pushInt. script_2200
        callFunc 0x1

loc_181:
        end
